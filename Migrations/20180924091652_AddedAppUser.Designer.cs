// <auto-generated />
using System;
using Admin_Tool.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Admin_Tool.Migrations
{
    [DbContext(typeof(AdminToolContext))]
    [Migration("20180924091652_AddedAppUser")]
    partial class AddedAppUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Admin_Tool.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("address1")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Admin_Tool.Models.AppExceptions", b =>
                {
                    b.Property<int>("Idexception")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDException")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExceptionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("StackTrace")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("TargetSite")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Idexception");

                    b.ToTable("AppExceptions");
                });

            modelBuilder.Entity("Admin_Tool.Models.BdxMaintenanceTwoajgrebchcjx", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("_ID");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnName("id_customer");

                    b.Property<string>("MaintenanceDate")
                        .IsRequired()
                        .HasColumnName("maintenance_date");

                    b.Property<string>("OrderNr")
                        .IsRequired()
                        .HasColumnName("order_nr");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.ToTable("BDX_Maintenance_TWOAJGREBCHCJX");
                });

            modelBuilder.Entity("Admin_Tool.Models.Configuration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ConfigurationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfigurationName")
                        .HasMaxLength(100);

                    b.Property<string>("ConfigurationValue")
                        .HasMaxLength(1000);

                    b.HasKey("ConfigurationId");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Admin_Tool.Models.Customer", b =>
                {
                    b.Property<int>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_customer")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("CompanyName")
                        .HasColumnName("company_name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CustomerName")
                        .HasColumnName("customer_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Lang")
                        .HasColumnName("lang")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneExt")
                        .HasColumnName("phone_ext")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdCustomer");

                    b.HasIndex("AddressId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("IX_Customer");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Admin_Tool.Models.EkoEvtCompany", b =>
                {
                    b.Property<Guid>("Guid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mb")
                        .IsRequired()
                        .HasColumnName("MB")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Guid");

                    b.ToTable("ekoEvtCompany");
                });

            modelBuilder.Entity("Admin_Tool.Models.EkoEvtEvent", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Guid");

                    b.ToTable("ekoEvtEvent");
                });

            modelBuilder.Entity("Admin_Tool.Models.EkoEvtPerson", b =>
                {
                    b.Property<Guid>("Guid");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Comment")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("OfferNumber");

                    b.Property<string>("Oib")
                        .HasColumnName("OIB")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<Guid?>("PerCmpId");

                    b.Property<Guid?>("PerEvtId");

                    b.Property<string>("Phone1")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Postal")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TshirtSize")
                        .HasColumnName("TShirtSize")
                        .HasMaxLength(10);

                    b.HasKey("Guid");

                    b.HasIndex("PerCmpId");

                    b.HasIndex("PerEvtId");

                    b.ToTable("ekoEvtPerson");
                });

            modelBuilder.Entity("Admin_Tool.Models.EkoEvtToken", b =>
                {
                    b.Property<Guid>("TokenId");

                    b.Property<Guid>("EventId");

                    b.Property<Guid?>("PersonId");

                    b.Property<DateTime>("TokenTime");

                    b.HasKey("TokenId");

                    b.HasIndex("EventId");

                    b.HasIndex("PersonId");

                    b.ToTable("ekoEvtToken");
                });

            modelBuilder.Entity("Admin_Tool.Models.ErrorLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("log_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnName("error")
                        .HasColumnType("text");

                    b.Property<string>("InputData")
                        .IsRequired()
                        .HasColumnName("input_data")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<DateTime>("LogDate")
                        .HasColumnName("log_date")
                        .HasColumnType("datetime");

                    b.HasKey("LogId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("Admin_Tool.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("EventMainPagePublish");

                    b.Property<byte[]>("EventMainPicture")
                        .HasColumnType("image");

                    b.Property<int?>("EventParent");

                    b.Property<bool?>("EventPublish");

                    b.Property<DateTime?>("EventPublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventShortText")
                        .HasMaxLength(1000);

                    b.Property<string>("EventText")
                        .HasColumnType("ntext");

                    b.Property<string>("EventTitle")
                        .HasMaxLength(100);

                    b.HasKey("EventId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Admin_Tool.Models.EventImage", b =>
                {
                    b.Property<int>("EventImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventImageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId")
                        .HasColumnName("EventID");

                    b.Property<byte[]>("EventImageImage")
                        .HasColumnType("image");

                    b.Property<byte[]>("EventImageThumbnail")
                        .HasColumnType("image");

                    b.Property<string>("EventImageTitle")
                        .HasMaxLength(100);

                    b.HasKey("EventImageId");

                    b.ToTable("EventImage");
                });

            modelBuilder.Entity("Admin_Tool.Models.Licenses", b =>
                {
                    b.Property<string>("LicenseKey")
                        .HasColumnName("license_key")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<short>("Version")
                        .HasColumnName("version");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("CanExtendUntil")
                        .HasColumnName("can_extend_until")
                        .HasColumnType("date");

                    b.Property<int>("IdCustomer")
                        .HasColumnName("id_customer");

                    b.Property<int?>("NumExpired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("num_expired")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TotalLicenses")
                        .HasColumnName("total_licenses");

                    b.Property<int>("TotalLicensesV5")
                        .HasColumnName("total_licenses_v5");

                    b.Property<int>("UsedLicenses")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("used_licenses")
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("UsedLicensesV5")
                        .HasColumnName("used_licenses_v5");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnName("valid_until")
                        .HasColumnType("date");

                    b.HasKey("LicenseKey", "Version");

                    b.HasIndex("IdCustomer");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("Admin_Tool.Models.Maintenance", b =>
                {
                    b.Property<int>("OrderNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_nr")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCustomer")
                        .HasColumnName("id_customer");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnName("maintenance_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .HasColumnName("currency")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InvoiceId")
                        .HasColumnName("invoice_id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasColumnName("license_key")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("LicensesExtended")
                        .HasColumnName("licenses_extended");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.Property<short>("Version")
                        .HasColumnName("version");

                    b.HasKey("OrderNr", "IdCustomer", "ProductId", "MaintenanceDate");

                    b.ToTable("Maintenance");
                });

            modelBuilder.Entity("Admin_Tool.Models.MaintenanceReminders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnName("customer_email")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnName("customer_name")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<int>("DaysValid")
                        .HasColumnName("days_valid");

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasColumnName("license_key")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("ReminderSent")
                        .HasColumnName("reminderSent");

                    b.Property<int>("TotalLicenses")
                        .HasColumnName("total_licenses");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnName("valid_until")
                        .HasColumnType("date");

                    b.Property<short>("Version")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("Date", "LicenseKey")
                        .IsUnique()
                        .HasName("IX_MaintenanceReminders");

                    b.ToTable("MaintenanceReminders");
                });

            modelBuilder.Entity("Admin_Tool.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NewsID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("NewsMainPagePublish");

                    b.Property<int?>("NewsParent");

                    b.Property<bool?>("NewsPublish");

                    b.Property<DateTime?>("NewsPublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NewsShortText")
                        .HasMaxLength(1000);

                    b.Property<string>("NewsText")
                        .HasColumnType("ntext");

                    b.Property<string>("NewsTitle")
                        .HasMaxLength(100);

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Admin_Tool.Models.NewsImage", b =>
                {
                    b.Property<int>("NewsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NewsImageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NewsId")
                        .HasColumnName("NewsID");

                    b.Property<byte[]>("NewsImageImage")
                        .HasColumnType("image");

                    b.Property<byte[]>("NewsImageThumbnail")
                        .HasColumnType("image");

                    b.Property<string>("NewsImageTitle")
                        .HasMaxLength(150);

                    b.HasKey("NewsImageId");

                    b.ToTable("NewsImage");
                });

            modelBuilder.Entity("Admin_Tool.Models.OfflineActivations", b =>
                {
                    b.Property<string>("LicenseKey")
                        .HasColumnName("license_key")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnName("activation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("LicensedTo")
                        .IsRequired()
                        .HasColumnName("licensed_to")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MachineName")
                        .HasColumnName("machineName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnName("requested_by")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TcoVersion")
                        .HasColumnName("tcoVersion")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("LicenseKey", "ActivationDate");

                    b.ToTable("OfflineActivations");
                });

            modelBuilder.Entity("Admin_Tool.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderNr")
                        .HasColumnName("order_nr");

                    b.Property<int>("IdCustomer")
                        .HasColumnName("id_customer");

                    b.Property<int>("IdReseller")
                        .HasColumnName("id_reseller");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnName("purchase_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<bool?>("CanActivate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("can_activate")
                        .HasDefaultValueSql("(1)");

                    b.Property<string>("Currency")
                        .HasColumnName("currency")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("InvoiceId")
                        .HasColumnName("invoice_id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LicenseKey")
                        .HasColumnName("license_key")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("LicensesPurchased")
                        .HasColumnName("licenses_purchased");

                    b.Property<string>("Notification")
                        .HasColumnName("notification")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.Property<short?>("Version")
                        .HasColumnName("version");

                    b.HasKey("OrderNr", "IdCustomer", "IdReseller", "ProductId", "PurchaseDate");

                    b.HasIndex("AddressId");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Admin_Tool.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ProductMainPagePublish");

                    b.Property<byte[]>("ProductMainPicture")
                        .HasColumnType("image");

                    b.Property<int?>("ProductParent");

                    b.Property<int?>("ProductPrice");

                    b.Property<bool?>("ProductPublish");

                    b.Property<DateTime?>("ProductPublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductShortText")
                        .HasMaxLength(1000);

                    b.Property<string>("ProductText")
                        .HasColumnType("ntext");

                    b.Property<string>("ProductTitle")
                        .HasMaxLength(100);

                    b.Property<string>("ProductType")
                        .HasMaxLength(50);

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Admin_Tool.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductImageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<byte[]>("ProductImageImage")
                        .HasColumnType("image");

                    b.Property<byte[]>("ProductImageThumbnail")
                        .HasColumnType("image");

                    b.Property<string>("ProductImageTitle")
                        .HasMaxLength(100);

                    b.HasKey("ProductImageId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("Admin_Tool.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<int?>("LicensedUsers")
                        .HasColumnName("licensed_users");

                    b.Property<string>("ProductFamily")
                        .HasColumnName("product_family")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("product_name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Admin_Tool.Models.ProductsErrorLog", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("error_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ErrorInfo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("error_info")
                        .HasColumnType("text")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("LicenseKey")
                        .HasColumnName("license_key")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_name")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserComment")
                        .HasColumnName("user_comment")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("UserEmail")
                        .HasColumnName("user_email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Version")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("version")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ErrorId");

                    b.ToTable("ProductsErrorLog");
                });

            modelBuilder.Entity("Admin_Tool.Models.ReleaseNotes", b =>
                {
                    b.Property<short>("Version")
                        .HasColumnName("version");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasMaxLength(4000);

                    b.HasKey("Version");

                    b.ToTable("ReleaseNotes");
                });

            modelBuilder.Entity("Admin_Tool.Models.Reseller", b =>
                {
                    b.Property<int>("IdReseller")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_reseller")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("CompanyName")
                        .HasColumnName("company_name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Lang")
                        .HasColumnName("lang")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneExt")
                        .HasColumnName("phone_ext")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ResellerName")
                        .HasColumnName("reseller_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdReseller");

                    b.ToTable("Reseller");
                });

            modelBuilder.Entity("Admin_Tool.Models.Resellers", b =>
                {
                    b.Property<int>("Idreseller")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDReseller")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("CountryId")
                        .HasColumnName("CountryID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ResellerData")
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Web")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Idreseller");

                    b.ToTable("Resellers");
                });

            modelBuilder.Entity("Admin_Tool.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ServiceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ServiceMainPagePublish");

                    b.Property<int?>("ServiceParent");

                    b.Property<bool?>("ServicePublish");

                    b.Property<DateTime?>("ServicePublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ServiceShortText")
                        .HasMaxLength(1000);

                    b.Property<string>("ServiceText")
                        .HasColumnType("ntext");

                    b.Property<string>("ServiceTitle")
                        .HasMaxLength(100);

                    b.HasKey("ServiceId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Admin_Tool.Models.ServiceImage", b =>
                {
                    b.Property<int>("ServiceImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ServiceImageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ServiceId")
                        .HasColumnName("ServiceID");

                    b.Property<byte[]>("ServiceImageImage")
                        .HasColumnType("image");

                    b.Property<byte[]>("ServiceImageThumbnail")
                        .HasColumnType("image");

                    b.Property<string>("ServiceImageTitle")
                        .HasMaxLength(150);

                    b.HasKey("ServiceImageId");

                    b.ToTable("ServiceImage");
                });

            modelBuilder.Entity("Admin_Tool.Models.StaticPage", b =>
                {
                    b.Property<int>("StaticPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StaticPageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StaticPagePath")
                        .HasMaxLength(100);

                    b.Property<byte[]>("StaticPagePicture")
                        .HasColumnType("image");

                    b.Property<string>("StaticPageText")
                        .HasColumnType("ntext");

                    b.Property<string>("StaticPageTitle")
                        .HasMaxLength(100);

                    b.HasKey("StaticPageId");

                    b.ToTable("StaticPage");
                });

            modelBuilder.Entity("Admin_Tool.Models.StaticPageImage", b =>
                {
                    b.Property<int>("StaticPageImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StaticPageImageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("StaticPageId")
                        .HasColumnName("StaticPageID");

                    b.Property<byte[]>("StaticPageImageImage")
                        .HasColumnType("image");

                    b.Property<byte[]>("StaticPageImageThumbnail")
                        .HasColumnType("image");

                    b.Property<string>("StaticPageImageTitle")
                        .HasMaxLength(100);

                    b.HasKey("StaticPageImageId");

                    b.ToTable("StaticPageImage");
                });

            modelBuilder.Entity("Admin_Tool.Models.TcoinstallLog", b =>
                {
                    b.Property<int>("UpgradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("upgrade_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("InstalledOn")
                        .HasColumnName("installed_on")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenseKey")
                        .HasColumnName("license_key")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnName("machineName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("NewVersion")
                        .IsRequired()
                        .HasColumnName("newVersion")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("OldVersion")
                        .HasColumnName("oldVersion")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("VersionInfo")
                        .HasColumnName("versionInfo")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("UpgradeId");

                    b.ToTable("TCOInstallLog");
                });

            modelBuilder.Entity("Admin_Tool.Models.TrialCodes", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<short>("Activated")
                        .HasColumnName("activated");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Code");

                    b.ToTable("TrialCodes");
                });

            modelBuilder.Entity("Admin_Tool.Models.UpgradeDetails", b =>
                {
                    b.Property<int>("OrderNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_nr")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCustomer")
                        .HasColumnName("id_customer");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UpgradeDate")
                        .HasColumnName("upgrade_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .HasColumnName("currency")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("InvoiceId")
                        .HasColumnName("invoice_id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasColumnName("license_key")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("LicensesUpgraded")
                        .HasColumnName("licenses_upgraded");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.Property<string>("UpgradeEmail")
                        .HasColumnName("upgrade_email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short>("Version")
                        .HasColumnName("version");

                    b.HasKey("OrderNr", "IdCustomer", "ProductId", "UpgradeDate");

                    b.ToTable("UpgradeDetails");
                });

            modelBuilder.Entity("Admin_Tool.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserEmail")
                        .HasMaxLength(50);

                    b.Property<string>("UserFullName")
                        .HasMaxLength(100);

                    b.Property<string>("UserLogin")
                        .HasMaxLength(50);

                    b.Property<string>("UserPassword")
                        .HasMaxLength(50);

                    b.Property<bool?>("UserSuperuser");

                    b.Property<string>("UserTelephone")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Admin_Tool.Models.Version", b =>
                {
                    b.Property<short>("Version1")
                        .HasColumnName("version");

                    b.Property<string>("LatestVersion")
                        .HasColumnName("latestVersion")
                        .HasMaxLength(15);

                    b.Property<short>("MaxVersion")
                        .HasColumnName("maxVersion");

                    b.HasKey("Version1");

                    b.ToTable("Version");
                });

            modelBuilder.Entity("Admin_tools.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<bool?>("Superuser");

                    b.Property<string>("Telephone");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("Admin_Tool.Models.Customer", b =>
                {
                    b.HasOne("Admin_Tool.Models.Address", "Address")
                        .WithMany("Customer")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Customer_Address");
                });

            modelBuilder.Entity("Admin_Tool.Models.EkoEvtPerson", b =>
                {
                    b.HasOne("Admin_Tool.Models.EkoEvtCompany", "PerCmp")
                        .WithMany("EkoEvtPerson")
                        .HasForeignKey("PerCmpId")
                        .HasConstraintName("FK_ekoEvtPerson_ekoEvtCompany");

                    b.HasOne("Admin_Tool.Models.EkoEvtEvent", "PerEvt")
                        .WithMany("EkoEvtPerson")
                        .HasForeignKey("PerEvtId")
                        .HasConstraintName("FK_ekoEvtPerson_ekoEvtEvent");
                });

            modelBuilder.Entity("Admin_Tool.Models.EkoEvtToken", b =>
                {
                    b.HasOne("Admin_Tool.Models.EkoEvtEvent", "Event")
                        .WithMany("EkoEvtToken")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_ekoEvtToken_ekoEvtEvent");

                    b.HasOne("Admin_Tool.Models.EkoEvtPerson", "Person")
                        .WithMany("EkoEvtToken")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_ekoEvtToken_ekoEvtPerson")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Admin_Tool.Models.Licenses", b =>
                {
                    b.HasOne("Admin_Tool.Models.Customer", "IdCustomerNavigation")
                        .WithMany("Licenses")
                        .HasForeignKey("IdCustomer")
                        .HasConstraintName("FK_Licenses_Customer");
                });

            modelBuilder.Entity("Admin_Tool.Models.OrderDetails", b =>
                {
                    b.HasOne("Admin_Tool.Models.Address", "Address")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_OrderDetails_Address_2");

                    b.HasOne("Admin_Tool.Models.Customer", "IdCustomerNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdCustomer")
                        .HasConstraintName("FK_OrderDetails_Customer_2");

                    b.HasOne("Admin_Tool.Models.Products", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetails_Products_2");
                });
#pragma warning restore 612, 618
        }
    }
}
